---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Continuous Delivery pipeline for static website'
Parameters:
  GitHubOwner:
    Description: 'The owner of the GitHub repository.'
    Type: String
  GitHubOAuthToken:
    Description: 'The OAuthToken of the GitHub user.'
    Type: String
  GitHubRepo:
    Description: 'The GitHub repository.'
    Type: String
Resources:
  ArtifactStore:
    Type: "AWS::S3::Bucket"
    Properties: 
      VersioningConfiguration:
        Status: Enabled
  CodePipelineIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codepipeline.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            - arn:aws:s3:::elasticbeanstalk*
            Effect: Allow
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
            - opsworks:CreateDeployment
            - opsworks:DescribeApps
            - opsworks:DescribeCommands
            - opsworks:DescribeDeployments
            - opsworks:DescribeInstances
            - opsworks:DescribeStacks
            - opsworks:UpdateApp
            - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
  
  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !Sub '${CodePipelineIAMRole.Arn}'
      Stages:
        - Name: Source
          Actions: 
          - Name: Source
            ActionTypeId:
              Category: Source 
              Owner: ThirdParty 
              Version: 1 
              Provider: GitHub
            OutputArtifacts:
            - Name: source-artifact-output-1
            Configuration:
              Owner: !Ref GitHubOwner
              Repo: !Ref GitHubRepo
              Branch: master
              OAuthToken: !Ref GitHubOAuthToken
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
            InputArtifacts:
              - Name: source-artifact-output-1
            OutputArtifacts:
              - Name: build-artifact-output-2
            Configuration:
                ProjectName: !Ref CodeBuildcopysourceProject
            RunOrder: 1
        - Name: ec2deploy
          Actions:
            - Name: "ec2deploy"
              InputArtifacts:
                - Name: build-artifact-output-2
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ec2deployProject
              RunOrder: 2

  CodeBuildcopysourceProject:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildRole
    Properties:
      Artifacts:
        Type: no_artifacts
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0-19.11.26
        Type: LINUX_CONTAINER
      Name: !Sub ${AWS::StackName}CodeBuildJavaProject
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: GITHUB
        Location: https://github.com/santhosh007K/cfncross.git
  ec2deployProject:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildRole
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec:
          Fn::Sub: |
            Version: 0.2
            Phases:
              install:
                runtime-versions:
                  python: 3.8
                commands:
                  # - export PYTHON_INTERPRETER=$(pyenv which python3)
                  - export PYTHON_INTERPRETER="/usr/local/bin/python3"
                  - echo $PYTHON_INTERPRETER
              pre_build:
                commands:
                  - pip3 install --upgrade pip
                  - pip3 install requests[security]
                  - pip3 install ansible
                  - pip3 install boto
                  - pip3 install boto3
                  - pip3 install --upgrade --force-reinstall boto3
                  - pip3 install --upgrade --force-reinstall awscli
                  - pip3 install curl jq
              build:
                commands:
                  - ansible --version
                  - cd cfncross
                  - ansible-playbook cloudform-ec2.yml -e "ansible_python_interpreter=$PYTHON_INTERPRETER"
                  
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:2.0-19.11.26"
        #Image: "aws/codebuild/amazonlinux2-x86_64-standard:2.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      #VpcConfig:
      #  VpcId:
      #    Fn::ImportValue: !Sub "${VPCStackName}-VPCID"
      #  Subnets:
      #  - Fn::ImportValue: !Sub "${VPCStackName}-SubnetPrivateA"
      #  - Fn::ImportValue: !Sub "${VPCStackName}-SubnetPrivateB"
      #  - Fn::ImportValue: !Sub "${VPCStackName}-SubnetPrivateC"
      #  SecurityGroupIds:
      #  - !Ref CodeBuildSecurityGroup
      ServiceRole: !GetAtt CodeBuildRole.Arn
  

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
